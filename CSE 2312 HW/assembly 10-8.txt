
//extern uint32_t sumU32(const uint32_t x[], uint32_t count)
//ADDRESS OF THE ARRAY IS IN R0, R1 is the # OF ELEMENTS IN THE ARRAY, RETURN SUM IN R0
//calculate the sum of the numbers in an array and return the sum

sumU32:
	MOV R2, R0 //MOVE THE ARRAY INTO R2
	MOV R0, #0 //MOVE THE #0 INTO R0
sum_loop:
	CMP R1, #0 //IS THE CURRENT INDEX 0?
	BEQ sum_end // IF IT IS, JUMP TO END, NO NUMBERS TO ADD
	LDR R3, [R2], #4 //LOAD THE FIRST INDEX OF THE ARRARY INTO R3 AND INCREMENT TO NEXT INDEX
	ADD R0, R0, R3 //ADD WHAT'S IN R3, AND R0 AND STORE IN R0
	SUB R1, R1, #1 //DECREMENT THE COUNTER
	B sum_loop //GET NEXT INT/REPEAT THE LOOP
sum_end:
	BX LR

OR

sumU32:
	MOV R2, R0 //MOVE THE ARRAY INTO R2
	MOV R0, #0 //MOVE THE #0 INTO R0
	CMP R1, #0 //IS THE FIRST INDEX 0?
sum_loop:
	BEQ sum_end // IF IT IS, JUMP TO END, NO NUMBERS TO ADD
	LDR R3, [R2], #4 //LOAD THE FIRST INDEX OF THE ARRARY INTO R3 AND INCREMENT TO NEXT INDEX
	ADD R0, R0, R3 //ADD WHAT'S IN R3, AND R0 AND STORE IN R0
	SUBS R1, R1, #1 //DECREMENT THE COUNTER AND SET THE ZERO FLAG IF THE CURRENT COUNTER INDEX IS 0
	B sum_loop //GET NEXT INT/REPEAT THE LOOP
sum_end:
	BX LR

OR

using for loop
sumU32:
	PUSH {R4}  //YOU NEED A NEW REGISTER
	MOV R2, R0 //MOVE THE ARRAY INTO R2 (R2 IS THE ARRAY INDEX)
	MOV R0, #0 //MOVE THE #0 INTO R0
	MOV R4, #0 //R4 IS THE INDEX (I) IN THE FOR LOOP AND IT'S SET TO 0
sum_loop:
	CMP R4, R1 //IS THE COUNTER EQUAL TO THE I
	BEQ sum_end // IF IT IS, JUMP TO END (THIS WOULD ONLY HAPPEN AT THE BEGINNING IF THE ARRAY IS EMPTY OR AT THE END WHEN THERE ARE NO MORE NUMBERS TO ADD)
	LDR R3, [R2, R4, LSL #2] //LOAD INTO R3 R2+R4*4   (R3 = X[R4] = X[I])

	ADD R0, R0, R3 //ADD WHAT'S IN R3, AND R0 AND STORE IN R0
	ADD R4, R4, #1 //INCREMENT THE I FROM THE FOR LOOP
	B sum_loop //GET NEXT INT/REPEAT THE LOOP
sum_end:
	POP {R4} //CLEAR THE CONTENTS OF R4
	BX LR


sumU32:
	MOV R2, R0 //MOVE THE ARRAY INTO R2 (R2 IS THE ARRAY INDEX)
	MOV R0, #0 //MOVE THE #0 INTO R0
sum_loop:
	CMP R1, #0 //IS THE COUNT = 0
	BEQ sum_end // IF IT IS, JUMP TO END 
	SUB R1, R1, #1 //PRE DECREMENT THE COUNTER
	LDR R3, [R2, R1, LSL #2] //

	ADD R0, R0, R3 //ADD WHAT'S IN R3, AND R0 AND STORE IN R0
	B sum_loop // GET NEXT INT/REPEAT LOOP
sum_end:
	BX LR









